#!/usr/bin/env python3
"""
Script to automatically update the coverage badge in README.md based on coverage results.

This script is designed to be run by GitHub Actions after pytest generates a coverage.json file.
It reads the total coverage percentage and updates the README.md badge with the appropriate
color (red < 50%, orange < 60%, yellow < 70%, yellowgreen < 80%, green < 90%, brightgreen >= 90%).

Usage:
    python .github/scripts/update_coverage_badge.py

Requires:
    - coverage.json file in the project root (generated by pytest --cov-report=json)
    - README.md file with existing coverage badge to update
"""

import json
import re
import sys
from pathlib import Path


def get_coverage_percentage(coverage_file_path):
    """Extract coverage percentage from coverage.json file."""
    try:
        with open(coverage_file_path, 'r') as f:
            coverage_data = json.load(f)
        
        # Get total coverage percentage
        total_coverage = coverage_data['totals']['percent_covered']
        return round(total_coverage)
    except (FileNotFoundError, KeyError, json.JSONDecodeError) as e:
        print(f"Error reading coverage file: {e}")
        return None


def get_badge_color(coverage_percent):
    """Get appropriate badge color based on coverage percentage."""
    if coverage_percent >= 90:
        return "brightgreen"
    elif coverage_percent >= 80:
        return "green"
    elif coverage_percent >= 70:
        return "yellowgreen"
    elif coverage_percent >= 60:
        return "yellow"
    elif coverage_percent >= 50:
        return "orange"
    else:
        return "red"


def update_readme_badge(readme_path, coverage_percent):
    """Update the coverage badge in README.md with the new percentage."""
    try:
        with open(readme_path, 'r') as f:
            content = f.read()
        
        # Pattern to match the entire coverage badge line
        badge_pattern = r'\[!\[Coverage\]\(https://img\.shields\.io/badge/coverage-\d+%25-[^)]+\.svg\)\]\([^)]+\)'
        
        # Get appropriate color for the coverage
        color = get_badge_color(coverage_percent)
        
        # Create new badge line
        new_badge_line = f'[![Coverage](https://img.shields.io/badge/coverage-{coverage_percent}%25-{color}.svg)](https://github.com/ContextLab/clustrix/actions/workflows/tests.yml)'
        
        # Replace the badge
        new_content = re.sub(badge_pattern, new_badge_line, content)
        
        if new_content != content:
            with open(readme_path, 'w') as f:
                f.write(new_content)
            print(f"✅ Updated coverage badge to {coverage_percent}% ({color})")
            return True
        else:
            # Check if badge was found by testing if the pattern matches
            match = re.search(badge_pattern, content)
            if match:
                print(f"ℹ️  Coverage badge already shows {coverage_percent}% - no update needed")
                print(f"🔍 Found badge: {match.group()}")
                return True  # Success - no change needed
            else:
                print("❌ No coverage badge found to update")
                print(f"🔍 Searched for pattern: {badge_pattern}")
                return False
            
    except Exception as e:
        print(f"❌ Error updating README: {e}")
        return False


def main():
    """Main function to update coverage badge."""
    # Get script directory and project root
    script_dir = Path(__file__).parent
    project_root = script_dir.parent.parent
    
    # Paths
    coverage_file = project_root / "coverage.json"
    readme_file = project_root / "README.md"
    
    # Check if files exist
    if not coverage_file.exists():
        print(f"❌ Coverage file not found: {coverage_file}")
        sys.exit(1)
        
    if not readme_file.exists():
        print(f"❌ README file not found: {readme_file}")
        sys.exit(1)
    
    # Get coverage percentage
    coverage_percent = get_coverage_percentage(coverage_file)
    if coverage_percent is None:
        print("❌ Failed to extract coverage percentage")
        sys.exit(1)
    
    print(f"📊 Current coverage: {coverage_percent}%")
    print(f"🔍 Looking for coverage badge in: {readme_file}")
    
    # Update README badge
    success = update_readme_badge(readme_file, coverage_percent)
    
    if success:
        print("✅ Coverage badge updated successfully!")
        sys.exit(0)
    else:
        print("❌ Failed to update coverage badge")
        sys.exit(1)


if __name__ == "__main__":
    main()